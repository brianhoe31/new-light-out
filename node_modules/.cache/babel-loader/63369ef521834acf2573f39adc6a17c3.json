{"ast":null,"code":"import _slicedToArray from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; //hasWon: boolean, true when board is all off\n\n    _this.flipCellsAroundMe = _this.flipCellsAroundMe.bind(_assertThisInitialized(_assertThisInitialized(_this))); //board: array-of-arrays of true/false\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      var rand = function rand() {\n        return Math.floor(Math.random() * 2);\n      };\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          if (rand() === 1) {\n            row.push(true);\n          } else {\n            row.push(false);\n          }\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"generateBoard\",\n    value: function generateBoard() {\n      var _this2 = this;\n\n      return this.state.board.map(function (row, idx) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: idx,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 7\n          }\n        }, row.map(function (cell, id) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: \"\".concat(idx, \"-\").concat(id),\n            value: \"\".concat(idx, \"-\").concat(id),\n            isLit: cell,\n            flipCellsAroundMe: _this2.flipCellsAroundMe,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 11\n            }\n          });\n        }));\n      });\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAroundMe\",\n    value: function flipCellsAroundMe(coord) {\n      console.log(coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      console.log([y, x]);\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it & tiles adjacent to it.\n        if (x >= 0 && x < ncols - 1 && y > 0 && y < nrows - 1) {\n          board[y][x] = !board[y][x]; //center\n\n          board[y - 1][x] = !board[y - 1][x]; //top\n\n          board[y + 1][x] = !board[y + 1][x]; //bottom\n\n          board[y][x - 1] = !board[y][x - 1]; //left\n\n          board[y][x + 1] = !board[y][x + 1]; //right\n        } else if (y === 0 && x < ncols - 1) {\n          //edge case top - first row\n          board[y][x] = !board[y][x]; //center\n\n          board[y + 1][x] = !board[y + 1][x]; //bottom\n\n          board[y][x - 1] = !board[y][x - 1]; //left\n\n          board[y][x + 1] = !board[y][x + 1]; //right\n        } else if (x === ncols - 1 && y !== 0 && y !== nrows - 1) {\n          //edge case right side\n          board[y][x] = !board[y][x]; //center\n\n          board[y - 1][x] = !board[y - 1][x]; //top\n\n          board[y + 1][x] = !board[y + 1][x]; //bottom\n\n          board[y][x - 1] = !board[y][x - 1]; //left\n        } else if (y === nrows - 1 && x !== 0 && x !== ncols - 1) {\n          //edge case bottom row \n          board[y][x] = !board[y][x]; //center\n\n          board[y - 1][x] = !board[y - 1][x]; //top\n\n          board[y][x - 1] = !board[y][x - 1]; //left\n\n          board[y][x + 1] = !board[y][x + 1]; //right\n        } else if (y === nrows - 1 && x === 0) {\n          board[y][x] = !board[y][x]; //center\n\n          board[y - 1][x] = !board[y - 1][x]; //top\n\n          board[y][x + 1] = !board[y][x + 1]; //right\n        } else if (y === nrows - 1 && x === ncols - 1) {\n          board[y][x] = !board[y][x]; //center\n\n          board[y - 1][x] = !board[y - 1][x]; //top\n\n          board[y][x - 1] = !board[y][x - 1]; //left\n        } else if (y === 0 && x === ncols - 1) {\n          board[y][x] = !board[y][x]; //center\n\n          board[y + 1][x] = !board[y + 1][x]; //bottom\n\n          board[y][x - 1] = !board[y][x - 1]; //left\n        }\n      }\n\n      flipCell(y, x); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var win = board.forEach(function (e) {\n        return e.find(function (el) {\n          return el === true;\n        });\n      });\n      console.log(\"win?\", win);\n      var hasWon = this.state.hasWon;\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, this.state.hasWon ? \"You Win!\" : this.generateBoard()));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 3,\n  //nrows: number of rows of board\n  ncols: 3 //ncols: number of cols of board\n\n};\nexport default Board;","map":{"version":3,"sources":["/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAroundMe","bind","rand","Math","floor","random","i","nrows","row","j","ncols","push","map","idx","cell","id","coord","console","log","split","Number","y","x","flipCell","win","forEach","e","find","el","setState","generateBoard","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 3, //nrows: number of rows of board\n    ncols: 3 //ncols: number of cols of board\n  }\n  constructor(props) {\n    super(props);\n    this.state = { hasWon: false, board: this.createBoard() } //hasWon: boolean, true when board is all off\n    this.flipCellsAroundMe = this.flipCellsAroundMe.bind(this); //board: array-of-arrays of true/false\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    let rand = () => {\n      return Math.floor(Math.random() * 2);\n    }\n\n    for (var i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for (var j = 0; j < this.props.ncols; j++) {\n        if (rand() === 1) {\n          row.push(true);\n        } else {\n          row.push(false);\n        }\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  generateBoard() {\n    return this.state.board.map((row, idx) => (\n      <tr key={idx}>\n        {row.map((cell, id) => (\n          <Cell key={`${idx}-${id}`} value={`${idx}-${id}`} isLit={cell} flipCellsAroundMe={this.flipCellsAroundMe} />\n        ))}\n      </tr>\n    ))\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAroundMe(coord) {\n    console.log(coord);\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    console.log([y, x]);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it & tiles adjacent to it.\n      if (x >= 0 && x < ncols - 1 && y > 0 && y < nrows - 1) {\n        board[y][x] = !board[y][x]; //center\n        board[y - 1][x] = !board[y - 1][x]; //top\n        board[y + 1][x] = !board[y + 1][x]; //bottom\n        board[y][x - 1] = !board[y][x - 1]; //left\n        board[y][x + 1] = !board[y][x + 1]; //right\n      } else if (y === 0 && x < ncols - 1) { //edge case top - first row\n        board[y][x] = !board[y][x]; //center\n        board[y + 1][x] = !board[y + 1][x]; //bottom\n        board[y][x - 1] = !board[y][x - 1]; //left\n        board[y][x + 1] = !board[y][x + 1]; //right\n      } else if (x === ncols - 1 && (y !== 0 && y !== nrows - 1)) { //edge case right side\n        board[y][x] = !board[y][x]; //center\n        board[y - 1][x] = !board[y - 1][x]; //top\n        board[y + 1][x] = !board[y + 1][x]; //bottom\n        board[y][x - 1] = !board[y][x - 1]; //left\n      } else if (y === nrows - 1 && (x !== 0 && x !== ncols - 1)) { //edge case bottom row \n        board[y][x] = !board[y][x]; //center\n        board[y - 1][x] = !board[y - 1][x]; //top\n        board[y][x - 1] = !board[y][x - 1]; //left\n        board[y][x + 1] = !board[y][x + 1]; //right\n      } else if ( y === nrows - 1 && x === 0){\n        board[y][x] = !board[y][x]; //center\n        board[y - 1][x] = !board[y - 1][x]; //top\n        board[y][x + 1] = !board[y][x + 1]; //right\n      } else if ( y === nrows - 1 && x === ncols - 1){\n        board[y][x] = !board[y][x]; //center\n        board[y - 1][x] = !board[y - 1][x]; //top\n        board[y][x - 1] = !board[y][x - 1]; //left\n      } else if ( y === 0 && x === ncols - 1){\n        board[y][x] = !board[y][x]; //center\n        board[y + 1][x] = !board[y + 1][x]; //bottom\n        board[y][x - 1] = !board[y][x - 1]; //left\n      }\n    }\n\n    flipCell(y, x);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let win = board.forEach(e => e.find(el => el === true));\n    console.log(\"win?\",win);\n\n    let hasWon = this.state.hasWon;\n\n    this.setState({ board, hasWon });\n  }\n\n  /** Render game board or winning message. */\n  render() {\n    return (\n      <table>\n        <tbody>\n            {this.state.hasWon ? \"You Win!\" : this.generateBoard()}\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}