{"ast":null,"code":"import _slicedToArray from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; //hasWon: boolean, true when board is all off\n    //board: array-of-arrays of true/false\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      var rand = function rand() {\n        return Math.floor(Math.random() * 2);\n      };\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          if (rand() === 1) {\n            row.push(['true']);\n          } else {\n            row.push(['false']);\n          }\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"generateBoard\",\n    value: function generateBoard() {\n      var _this2 = this;\n\n      return this.state.board.map(function (e, indx) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(Cell, {\n          key: indx,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }\n        }));\n      });\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n      var hasWon = this.state.hasWon;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, this.generateBoard()))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 4,\n  //nrows: number of rows of board\n  ncols: 4 //ncols: number of cols of board\n\n};\nexport default Board;","map":{"version":3,"sources":["/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","rand","Math","floor","random","i","nrows","row","j","ncols","push","map","e","indx","coord","split","Number","y","x","flipCell","setState","generateBoard","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 4, //nrows: number of rows of board\n    ncols: 4 //ncols: number of cols of board\n  }\n  constructor(props) {\n    super(props);\n    this.state = { hasWon: false, board: this.createBoard() }\n    //hasWon: boolean, true when board is all off\n    //board: array-of-arrays of true/false\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    let rand = () => {\n      return Math.floor(Math.random() * 2);\n    }\n\n    for (var i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for (var j = 0; j < this.props.ncols; j++) {\n        if (rand() === 1) {\n          row.push(['true']);\n        } else {\n          row.push(['false']);\n        }\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  generateBoard() {\n    return this.state.board.map( (e, indx) => (\n      <tr><Cell key={indx}/></tr>\n    ))\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let hasWon = this.state.hasWon;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({ board, hasWon });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    return (\n      <table>\n        <tbody>\n          <tr>\n            {this.generateBoard()}\n          </tr>\n        </tbody>\n      </table>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}