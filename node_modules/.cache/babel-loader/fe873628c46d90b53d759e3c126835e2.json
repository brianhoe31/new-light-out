{"ast":null,"code":"import _slicedToArray from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; //hasWon: boolean, true when board is all off\n\n    _this.flipCellsAroundMe = _this.flipCellsAroundMe.bind(_assertThisInitialized(_assertThisInitialized(_this))); //board: array-of-arrays of true/false\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      var rand = function rand() {\n        return Math.floor(Math.random() * 2);\n      };\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          if (rand() === 1) {\n            row.push(true);\n          } else {\n            row.push(false);\n          }\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"generateBoard\",\n    value: function generateBoard() {\n      var _this2 = this;\n\n      return this.state.board.map(function (row, idx) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 7\n          }\n        }, row.map(function (cell, id) {\n          return /*#__PURE__*/React.createElement(\"td\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(Cell, {\n            key: \"\".concat(idx, \"-\").concat(id),\n            value: \"\".concat(idx, \"-\").concat(id),\n            isLit: cell,\n            flipCellsAroundMe: _this2.flipCellsAroundMe,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }\n          }));\n        }));\n      });\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAroundMe\",\n    value: function flipCellsAroundMe(coord) {\n      console.log(coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      console.log([y, x]);\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y > 0 && y < nrows) {\n          board[y][x] = !board[y][x]; //center\n\n          board[y - 1][x] = !board[y - 1][x]; //top\n\n          board[y + 1][x] = !board[y + 1][x]; //bottom\n\n          board[y][x - 1] = !board[y][x - 1]; //left\n\n          board[y][x + 1] = !board[y][x + 1]; //right\n        }\n      }\n\n      flipCell(y, x); //flip left\n      //flip right \n      //flip top\n      //flip bot\n      // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = this.state.hasWon;\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      }, this.state.hasWon ? \"You Win!\" : this.generateBoard())));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 6,\n  //nrows: number of rows of board\n  ncols: 6 //ncols: number of cols of board\n\n};\nexport default Board;","map":{"version":3,"sources":["/Users/bhuo/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAroundMe","bind","rand","Math","floor","random","i","nrows","row","j","ncols","push","map","idx","cell","id","coord","console","log","split","Number","y","x","flipCell","setState","generateBoard","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 6, //nrows: number of rows of board\n    ncols: 6 //ncols: number of cols of board\n  }\n  constructor(props) {\n    super(props);\n    this.state = { hasWon: false, board: this.createBoard() } //hasWon: boolean, true when board is all off\n    this.flipCellsAroundMe = this.flipCellsAroundMe.bind(this); //board: array-of-arrays of true/false\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    let rand = () => {\n      return Math.floor(Math.random() * 2);\n    }\n\n    for (var i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for (var j = 0; j < this.props.ncols; j++) {\n        if (rand() === 1) {\n          row.push(true);\n        } else {\n          row.push(false);\n        }\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  generateBoard() {\n    return this.state.board.map((row, idx) => (\n      <tr>\n        {row.map((cell, id) => (\n          <td><Cell key={`${idx}-${id}`} value={`${idx}-${id}`} isLit={cell} flipCellsAroundMe={this.flipCellsAroundMe} /></td>\n        ))}\n      </tr>\n    ))\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAroundMe(coord) {\n    console.log(coord);\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    console.log([y, x]);\n\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y > 0 && y < nrows) {\n        board[y][x] = !board[y][x]; //center\n        board[y-1][x] = !board[y-1][x]; //top\n        board[y+1][x] = !board[y+1][x]; //bottom\n        board[y][x-1] = !board[y][x-1]; //left\n        board[y][x+1] = !board[y][x+1]; //right\n      }\n    }\n\n    flipCell(y, x);\n\n    //flip left\n\n    //flip right \n\n    //flip top\n\n    //flip bot\n\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = this.state.hasWon;\n\n    this.setState({ board, hasWon });\n  }\n\n  /** Render game board or winning message. */\n  render() {\n    return (\n      <table>\n        <tbody>\n          <tr>\n            {this.state.hasWon ? \"You Win!\" : this.generateBoard()}\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}